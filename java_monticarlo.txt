package pack ;
import java.util.Random;
import java.util.concurrent.*;
import java.util.concurrent.atomic.LongAdder;

public class MonteCarloPiSimulator {
    private static final int NUM_POINTS = 10_000_000;

    public static void main(String[] args) {
        System.out.println("Round 1: Parallel Execution");
        runParallel();

        System.out.println("\nRefreshing...\n");

        System.out.println("Round 2: Sequential Execution");
        runSequential();
    }

    private static void runSequential() {
        long start = System.nanoTime();
        Random rand = new Random();
        long inside = 0;

        for (int i = 0; i < NUM_POINTS; i++) {
            double x = rand.nextDouble();
            double y = rand.nextDouble();
            if (x * x + y * y <= 1.0) inside++;
        }

        double pi = 4.0 * inside / NUM_POINTS;
        long end = System.nanoTime();
        printResult(pi, end - start);
    }

    private static void runParallel() {
        long start = System.nanoTime();
        int cores = Runtime.getRuntime().availableProcessors();
        ExecutorService executor = Executors.newFixedThreadPool(cores);
        LongAdder hits = new LongAdder();
        int batchSize = NUM_POINTS / cores;

        try {
            CountDownLatch latch = new CountDownLatch(cores);

            for (int i = 0; i < cores; i++) {
                executor.submit(() -> {
                    ThreadLocalRandom rand = ThreadLocalRandom.current();
                    long localHits = 0;
                    for (int j = 0; j < batchSize; j++) {
                        double x = rand.nextDouble();
                        double y = rand.nextDouble();
                        if (x * x + y * y <= 1.0) localHits++;
                    }
                    hits.add(localHits);
                    latch.countDown();
                });
            }

            latch.await();
            double pi = 4.0 * hits.doubleValue() / NUM_POINTS;
            long end = System.nanoTime();
            printResult(pi, end - start);
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    private static void printResult(double pi, long durationNano) {
        System.out.printf("Result: π ≈ %.8f%n", pi);
        System.out.printf("Response Time: %.3f ms%n", durationNano / 1_000_000.0);
    }
}
